{% comment %}
  Joy: Custom Way to Redeem Section (Legacy)

  A comprehensive redeeming programs display with interactive modals and dynamic point selection.
  Displays all available redemption options with clickable cards and redemption modals.

  Note: This is a legacy section. For new implementations, prefer using:
  - joy-redeeming-programs.liquid snippet for embedded widgets
  - joy-loyalty-hub.liquid section for complete loyalty pages
  - Joy App blocks in the theme editor

  Usage:
    Add this section through the Theme Editor:
    1. Go to theme customizer
    2. Click "Add section"
    3. Search for "Joy: Custom Way to Redeem"
    4. Configure layout and styling settings

  Key Features:
    - Flex-wrap grid layout of redemption program cards
    - Interactive redemption modals with dynamic or fixed point selection
    - Discount code display with copy-to-clipboard functionality
    - Automatic cart discount application
    - Point slider for dynamic redemption programs
    - Real-time discount calculation display
    - Login prompts for guest users
    - Disabled state for programs customer can't afford
    - Extensive customization options for cards, modals, typography
    - Hover effects and transitions
    - Success states with visual feedback

  Program Types:
    - Fixed Redemption: Spend exact points for a reward (e.g., 500 points for $5 off)
    - Dynamic Redemption: Variable points with slider (e.g., 100 points = $1 off, scalable)
    - Discount types: Percentage or amount discounts
    - Free shipping rewards
    - Gift card redemptions
    - Product discounts

  Modal Features:
    - Dynamic Programs: Point slider with real-time discount calculation
    - Fixed Programs: Simple confirmation with point cost
    - Discount code display: Copy button and auto-apply functionality
    - Success animations with checkmarks
    - Error handling with user-friendly messages
    - Processing states with spinner animations
    - Escape key to close, overlay click to close

  Redemption Flow:
    1. Customer clicks program card
    2. Modal opens with program details
    3. For dynamic: Slider to select points amount
    4. Customer confirms redemption
    5. Joy SDK processes redemption
    6. Discount code displayed with copy/apply buttons
    7. Customer can apply code and redirect to cart

  Customization (Theme Editor):
    - Layout: Max width, section padding, card gaps
    - Typography: Title, program names, descriptions, points text sizes
    - Card Styling: Background, border, padding, hover states, border radius
    - Icons: Size, background color, border radius, show/hide
    - Button Styling: Text size, border radius, colors
    - Colors: Primary, background, title, text, borders
    - Text Settings: All button and message text customizable
    - Modal Settings: Slider labels, success messages, discount code instructions
    - Responsive: Separate settings for mobile

  Guest User Experience:
    - Shows redeem buttons but redirects to /account/login when clicked
    - Can browse available rewards before signing in

  Discount Code Features:
    - Displays generated coupon code after redemption
    - Copy-to-clipboard with visual feedback
    - "Apply code" button that redirects to cart with discount applied
    - Fallback to standard /discount/{code} URL redirect

  Performance Features:
    - Lazy modal rendering (only when needed)
    - Optimized animations with CSS transforms
    - Efficient event delegation
    - Error boundaries and fallbacks

{% endcomment %}

<div class="joy-custom-redeem-section" data-section-id="{{ section.id }}">
  <style>
    .joy-custom-redeem-container {
      max-width: {{ section.settings.max_width | default: 1200 }}px;
      margin: 0 auto;
      padding: {{ section.settings.section_padding | default: 60 }}px 24px;
      background: {{ section.settings.background_color | default: '#FFFFFF' }};
      font-family: inherit;
    }

    .joy-redeem-header {
      text-align: {{ section.settings.header_alignment | default: 'center' }};
      margin-bottom: 56px;
    }

    .joy-redeem-title {
      font-size: {{ section.settings.title_size | default: 28 }}px;
      color: {{ section.settings.title_color | default: '#1A1A1A' }};
      margin: 0 0 8px 0;
      font-weight: 600;
      letter-spacing: -0.02em;
      line-height: 1.2;
    }

    .joy-redeem-subtitle {
      font-size: 16px;
      color: {{ section.settings.subtitle_color | default: '#6B7280' }};
      margin: 0;
      line-height: 1.5;
      font-weight: 400;
    }

    .joy-programs-list {
      display: flex;
      flex-wrap: wrap;
      gap: {{ section.settings.card_gap | default: 24 }}px;
      justify-content: center;
    }

    .joy-programs-list .joy-redeem-card {
      flex: 0 0 260px;
      max-width: 260px;
    }

    .joy-redeem-card {
      background: {{ section.settings.card_background | default: '#FFFFFF' }};
      border: {{ section.settings.card_border_width | default: 1 }}px solid {{ section.settings.card_border_color | default: '#E5E7EB' }};
      border-radius: {{ section.settings.card_border_radius | default: 8 }}px;
      padding: {{ section.settings.card_padding | default: 32 }}px;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: {{ section.settings.card_gap_internal | default: 16 }}px;
      transition: all 0.2s ease;
      cursor: pointer;
      text-decoration: none;
      color: inherit;
      position: relative;
      text-align: center;
      min-height: 200px;
    }

    .joy-redeem-card:hover {
      transform: translateY(-1px);
      border-color: {{ section.settings.card_hover_border_color | default: '#6B7280' }};
      background: {{ section.settings.card_hover_background | default: '#F9FAFB' }};
    }

    .joy-redeem-card-disabled {
      opacity: 0.6;
      cursor: not-allowed;
      pointer-events: none;
    }

    .joy-redeem-icon {
      width: {{ section.settings.icon_size | default: 56 }}px;
      height: {{ section.settings.icon_size | default: 56 }}px;
      flex-shrink: 0;
      display: flex;
      align-items: center;
      justify-content: center;
      background: {{ section.settings.icon_background | default: '#F3F4F6' }};
      border-radius: {{ section.settings.icon_border_radius | default: 12 }}px;
      margin-bottom: 16px;
    }

    .joy-redeem-icon img {
      width: {{ section.settings.icon_image_size | default: 32 }}px;
      height: {{ section.settings.icon_image_size | default: 32 }}px;
      object-fit: contain;
      opacity: 0.9;
    }

    .joy-redeem-content {
      flex: 1;
      display: flex;
      flex-direction: column;
      align-items: center;
      width: 100%;
    }

    .joy-redeem-name {
      font-size: {{ section.settings.program_name_size | default: 18 }}px;
      font-weight: 600;
      color: {{ section.settings.text_color | default: '#111827' }};
      margin: 0 0 8px 0;
      line-height: 1.4;
      letter-spacing: -0.01em;
    }

    .joy-redeem-description {
      font-size: {{ section.settings.program_description_size | default: 14 }}px;
      color: {{ section.settings.description_color | default: '#6B7280' }};
      line-height: 1.6;
      margin: 0 0 auto 0;
      font-weight: 400;
    }

    .joy-redeem-action {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 8px;
      width: 100%;
      margin-top: auto;
    }

    .joy-redeem-button {
      background: {{ section.settings.primary_color | default: '#6B7280' }};
      color: {{ section.settings.button_color | default: '#FFFFFF' }};
      border: none;
      padding: 12px 24px;
      border-radius: {{ section.settings.button_border_radius | default: 6 }}px;
      font-size: {{ section.settings.button_text_size | default: 14 }}px;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.2s ease;
      white-space: nowrap;
      width: 100%;
    }

    .joy-redeem-button:hover {
      background: {{ section.settings.primary_color_hover | default: '#4B5563' }};
      transform: none;
    }

    .joy-redeem-points {
      font-size: {{ section.settings.points_size | default: 18 }}px;
      color: {{ section.settings.primary_color | default: '#6B7280' }};
      font-weight: 600;
      white-space: nowrap;
      margin-bottom: 8px;
    }

    .joy-error-state {
      background: #FFF3E0;
      border: 2px solid #FFB74D;
      border-radius: {{ section.settings.list_border_radius | default: 12 }}px;
      padding: 24px;
      text-align: center;
      color: #E65100;
      margin: 20px 0;
    }

    /* Responsive */
    @media (max-width: 768px) {
      .joy-redeem-title {
        font-size: 24px;
      }

      .joy-redeem-card {
        padding: {{ section.settings.card_padding_mobile | default: 16 }}px;
        gap: {{ section.settings.card_gap_mobile | default: 12 }}px;
      }

      .joy-redeem-action {
        align-items: center;
      }
    }

    /* Redeem Modal Styles */
    .joy-redeem-modal {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: 9999;
      animation: joy-modal-fade-in 0.3s ease;
      font-family: inherit;
      display: none;
    }

    .joy-redeem-modal-overlay {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.5);
      backdrop-filter: blur(4px);
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 20px;
    }

    .joy-redeem-modal-content {
      background: white;
      border-radius: 12px;
      max-width: 500px;
      width: 100%;
      max-height: 80vh;
      overflow-y: auto;
      position: relative;
      animation: joy-modal-slide-up 0.3s ease;
      box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
    }

    /* Modal Size Variants */
    .joy-redeem-modal-small .joy-redeem-modal-content {
      max-width: 400px;
    }

    .joy-redeem-modal-medium .joy-redeem-modal-content {
      max-width: 500px;
    }

    .joy-redeem-modal-large .joy-redeem-modal-content {
      max-width: 650px;
    }

    .joy-redeem-modal-header {
      text-align: center;
      padding: 32px 32px 0 32px;
    }

    .joy-redeem-modal-close {
      position: absolute;
      top: 16px;
      right: 16px;
      background: none;
      border: none;
      font-size: 24px;
      cursor: pointer;
      color: #666;
      z-index: 1;
      width: 32px;
      height: 32px;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 50%;
      transition: background 0.2s ease;
    }

    .joy-redeem-modal-close:hover {
      background: #f5f5f5;
    }

    .joy-redeem-modal-icon {
      width: 72px;
      height: 72px;
      margin: 0 auto 20px;
      background: {{ section.settings.primary_color | default: '#D4A574' }}10;
      border-radius: 20px;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .joy-redeem-modal-icon img {
      width: 36px;
      height: 36px;
      object-fit: contain;
      opacity: 0.9;
    }

    .joy-redeem-modal-title {
      font-size: 20px;
      font-weight: 600;
      color: #111827;
      margin: 0 0 8px 0;
      letter-spacing: -0.02em;
    }

    .joy-redeem-modal-description {
      font-size: 14px;
      color: #6B7280;
      margin: 0 0 28px 0;
      line-height: 1.5;
    }

    .joy-redeem-modal-body {
      padding: 0 32px 32px 32px;
    }

    .joy-points-selector {
      background: #F9FAFB;
      padding: 8px 0px;
      margin-bottom: 24px;
    }

    .joy-points-selector-label {
      font-size: 14px;
      color: #374151;
      font-weight: 500;
      margin-bottom: 16px;
      display: block;
    }

    .joy-slider-container {
      margin: 20px 0;
    }

    .joy-points-slider {
      width: 100%;
      height: 6px;
      border-radius: 3px;
      background: #E5E7EB;
      outline: none;
      -webkit-appearance: none;
    }

    .joy-points-slider::-webkit-slider-thumb {
      -webkit-appearance: none;
      appearance: none;
      width: 20px;
      height: 20px;
      border-radius: 50%;
      background: {{ section.settings.primary_color | default: '#D4A574' }};
      cursor: pointer;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .joy-points-slider::-moz-range-thumb {
      width: 20px;
      height: 20px;
      border-radius: 50%;
      background: {{ section.settings.primary_color | default: '#D4A574' }};
      cursor: pointer;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .joy-slider-values {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-top: 10px;
      font-size: 13px;
      color: #6B7280;
    }

    .joy-slider-value {
      font-weight: 600;
      color: {{ section.settings.primary_color | default: '#D4A574' }};
      font-size: 16px;
    }

    .joy-dynamic-value {
      text-align: center;
      margin-top: 20px;
      padding: 12px;
      background: #F8F9FA;
      border: 1px solid #E9ECEF;
      border-radius: 8px;
      font-size: 15px;
      color: #374151;
    }

    .joy-dynamic-value strong {
      color: {{ section.settings.primary_color | default: '#6B7280' }};
      font-size: 18px;
    }

    .joy-redeem-modal-actions {
      display: flex;
      gap: 12px;
      justify-content: flex-end;
    }

    .joy-redeem-modal-button {
      padding: 14px 28px;
      border: none;
      border-radius: 10px;
      font-size: 14px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .joy-cancel-button {
      background: #F3F4F6;
      color: #6B7280;
    }

    .joy-cancel-button:hover {
      background: #E5E7EB;
    }

    .joy-confirm-button {
      background: {{ section.settings.primary_color | default: '#D4A574' }};
      color: white;
      min-width: 120px;
      position: relative;
    }

    .joy-confirm-button:hover:not(:disabled) {
      background: {{ section.settings.primary_color | default: '#D4A574' | color_darken: 10 }};
      transform: translateY(-1px);
    }

    .joy-confirm-button:disabled {
      opacity: 0.6;
      cursor: not-allowed;
      transform: none;
    }

    .joy-confirm-button .joy-spinner {
      animation: joy-spin 1s linear infinite;
    }

    .joy-reward-summary {
      background: #F8F9FA;
      border: 1px solid #E9ECEF;
      border-radius: 12px;
      padding: 16px;
      margin-bottom: 24px;
    }

    .joy-reward-summary-title {
      font-size: 14px;
      font-weight: 600;
      color: #374151;
      margin: 0 0 8px 0;
    }

    .joy-reward-summary-content {
      font-size: 13px;
      color: #6B7280;
      line-height: 1.4;
      margin: 0;
    }

    @keyframes joy-modal-fade-in {
      from { opacity: 0; }
      to { opacity: 1; }
    }

    @keyframes joy-modal-fade-out {
      from { opacity: 1; }
      to { opacity: 0; }
    }

    @keyframes joy-modal-slide-up {
      from { transform: translateY(20px); opacity: 0; }
      to { transform: translateY(0); opacity: 1; }
    }

    @keyframes joy-spin {
      from { transform: rotate(0deg); }
      to { transform: rotate(360deg); }
    }
  </style>

  <div class="joy-custom-redeem-container">
    {% if section.settings.show_header %}
    <div class="joy-redeem-header">
      <h2 class="joy-redeem-title">{{ section.settings.title | default: 'Ways to Redeem' }}</h2>
      {% if section.settings.subtitle %}
        <p class="joy-redeem-subtitle">{{ section.settings.subtitle }}</p>
      {% endif %}
    </div>
    {% endif %}

    <joy-redeem-programs
      class="joy-programs-list"
      data-section-id="{{ section.id }}"
      data-customer-id="{{ customer.id | default: '' }}"
      data-icon-visible="{{ section.settings.show_icon }}"
    >
      <!-- No loading state - content will appear when ready -->
    </joy-redeem-programs>
  </div>
</div>

<script>
if (!customElements.get('joy-redeem-programs')) {
  customElements.define('joy-redeem-programs', class JoyRedeemPrograms extends HTMLElement {
    // Constants
    static PROGRAM_TYPES = {
      REDEEMING: 'redeeming',
      SPENDING: 'spending',
      DYNAMIC: 'dynamic'
    };

    static CSS_CLASSES = {
      CARD: 'joy-redeem-card',
      CARD_DISABLED: 'joy-redeem-card-disabled',
      MODAL: 'joy-redeem-modal',
      MODAL_MEDIUM: 'joy-redeem-modal-medium',
      CONFIRM_BUTTON: 'joy-confirm-button',
      CANCEL_BUTTON: 'joy-cancel-button'
    };

    static DISCOUNT_TYPES = {
      PERCENTAGE: 'discount_percentage',
      AMOUNT: 'discount_amount'
    };

    static ERROR_MESSAGES = {
      SDK_NOT_LOADED: 'Joy SDK not loaded',
      SDK_NOT_INITIALIZED: 'Joy SDK not properly initialized',
      NO_PROGRAMS: 'No redeem programs found',
      API_ERROR: 'Error accessing Joy API',
      REDEEM_ERROR: 'Unable to process redemption request'
    };

    constructor() {
      super();
      this.sectionId = this.dataset.sectionId;
      this.customerId = this.dataset.customerId;
      // Handle icon visibility setting
      const iconSetting = this.dataset.iconVisible;
      if (iconSetting === 'false' || iconSetting === '' || iconSetting === undefined || iconSetting === null) {
        this.showIcon = false;
      } else if (iconSetting === 'true') {
        this.showIcon = true;
      } else {
        // Default to true if setting is not properly defined
        this.showIcon = true;
      }
      this.cachedCustomer = null;
      this.isInitialized = false;
    }

    connectedCallback() {
      console.log('Joy Redeem Programs component connected for section:', this.sectionId);
      this.initializeJoyIntegration();
    }

    initializeJoyIntegration() {
      // Prevent duplicate initialization
      if (this.isInitialized) {
        console.log('Joy integration already initialized for redeem programs, skipping');
        return;
      }

      // Listen for Joy ready event
      window.addEventListener('joy:ready', () => {
        console.log('joy:ready event received for redeem programs');
        if (!this.isInitialized) {
          this.isInitialized = true;
          this.loadRedeemPrograms();
        }
      });

      // Also try immediately in case Joy is already loaded
      if (window.joyInstance && !this.isInitialized) {
        console.log('Joy instance already available for redeem programs');
        this.isInitialized = true;
        this.loadRedeemPrograms();
      }
    }

    async loadRedeemPrograms() {
      try {
        const joyInstance = this.validateJoyInstance();
        if (!joyInstance) return;

        await this.loadCustomerData(joyInstance);
        const programs = await this.fetchRedeemPrograms(joyInstance);

        if (!programs) return;

        this.processAndRenderPrograms(programs);
      } catch (error) {
        console.error('Error in loadRedeemPrograms:', error);
        this.showNoDataMessage('Error loading redeem programs: ' + (error.message || 'Unknown error'));
      }
    }

    validateJoyInstance() {
      const joyInstance = window.joyInstance;

      if (!joyInstance) {
        console.log('Joy instance not available for redeem programs');
        this.showNoDataMessage(JoyRedeemPrograms.ERROR_MESSAGES.SDK_NOT_LOADED);
        return null;
      }

      if (typeof joyInstance.redeemPrograms !== 'function') {
        console.warn('redeemPrograms method not available on Joy instance');
        this.showNoDataMessage(JoyRedeemPrograms.ERROR_MESSAGES.SDK_NOT_INITIALIZED);
        return null;
      }

      return joyInstance;
    }

    async loadCustomerData(joyInstance) {
      if (!this.customerId || this.cachedCustomer) return;

      try {
        this.cachedCustomer = await joyInstance.customer();
      } catch (error) {
        console.error('Error fetching customer data for redeem programs:', error);
        // Don't stop execution, continue without customer data
      }
    }

    async fetchRedeemPrograms(joyInstance) {
      try {
        const redeemProgramsData = await joyInstance.redeemPrograms();
        console.log('Joy redeemPrograms data:', redeemProgramsData);
        return redeemProgramsData;
      } catch (error) {
        console.error('Error fetching redeem programs:', error);
        this.showNoDataMessage(JoyRedeemPrograms.ERROR_MESSAGES.API_ERROR + ': ' + (error.message || 'Unknown error'));
        return null;
      }
    }

    processAndRenderPrograms(redeemProgramsData) {
      if (!redeemProgramsData) {
        console.log('No redeemPrograms data available');
        this.showNoDataMessage('No redeem programs data available');
        return;
      }

      let programs = this.extractPrograms(redeemProgramsData);

      if (!this.isValidProgramsArray(programs)) {
        console.log('No redeem programs array found in response');
        this.showNoDataMessage('No redeem programs configured');
        return;
      }

      const redeemingPrograms = programs.filter(program =>
        program.type === JoyRedeemPrograms.PROGRAM_TYPES.REDEEMING ||
        program.type === JoyRedeemPrograms.PROGRAM_TYPES.SPENDING
      );

      if (redeemingPrograms.length === 0) {
        this.showNoDataMessage('No redeem programs found');
        return;
      }

      this.renderPrograms(redeemingPrograms);
    }

    extractPrograms(redeemProgramsData) {
      if (redeemProgramsData.redeeming) {
        return redeemProgramsData.redeeming;
      }
      if (redeemProgramsData.data) {
        return redeemProgramsData.data;
      }
      return redeemProgramsData;
    }

    isValidProgramsArray(programs) {
      return programs && Array.isArray(programs) && programs.length > 0;
    }

    renderPrograms(programs) {
      try {
        this.innerHTML = '';

        const activePrograms = this.getActivePrograms(programs);
        if (activePrograms.length === 0) {
          this.showNoDataMessage('No active redeem programs');
          return;
        }

        this.renderProgramCards(activePrograms);
      } catch (error) {
        console.error('Error rendering programs:', error);
        this.showNoDataMessage('Error displaying programs');
      }
    }

    getActivePrograms(programs) {
      if (!Array.isArray(programs)) {
        console.warn('Invalid programs array provided to renderPrograms');
        return [];
      }

      return programs.filter(program =>
        program && program.status && !program.isDraft
      );
    }

    renderProgramCards(activePrograms) {
      activePrograms.forEach((program, index) => {
        try {
          const card = this.createProgramCard(program);
          this.appendChild(card);
        } catch (error) {
          console.error(`Error creating card for program ${index}:`, error);
          // Continue with other programs
        }
      });
    }

    // Helper functions for program card creation
    isDynamicProgram(program) {
      return program.redeemType === JoyRedeemPrograms.PROGRAM_TYPES.DYNAMIC;
    }

    getMinPointsRequired(program) {
      const isDynamic = this.isDynamicProgram(program);
      return isDynamic ?
        (program.minSpendPoint || program.spendPoint || 0) :
        (program.spendPoint || program.pointCost || 0);
    }

    canCustomerRedeem(program) {
      const customerPoints = this.getCustomerPoints();
      const minPointsRequired = this.getMinPointsRequired(program);
      return customerPoints >= minPointsRequired;
    }

    hasValidIcon(iconUrl) {
      return iconUrl && iconUrl !== '' && !iconUrl.includes('undefined') && !iconUrl.includes('null');
    }

    // Shared utility functions for point formatting
    getPointTerminology() {
      return {
        singular: window.AVADA_JOY?.settings?.pointSingular || 'point',
        plural: window.AVADA_JOY?.settings?.pointPlural || 'points'
      };
    }

    formatPointText(points) {
      if (!points || points === 0) return this.getPointTerminology().plural;
      const { singular, plural } = this.getPointTerminology();
      return points === 1 ? singular : plural;
    }

    formatPointsWithText(points) {
      return `${points} ${this.formatPointText(points)}`;
    }

    getDynamicDisplayText(program) {
      if (this.isPercentageDiscount(program)) {
        return this.formatPercentageDiscountText(program);
      }

      if (this.isAmountDiscount(program)) {
        return this.formatAmountDiscountText(program);
      }

      return this.formatDefaultDynamicText(program);
    }

    isPercentageDiscount(program) {
      return program.typeEarn === JoyRedeemPrograms.DISCOUNT_TYPES.PERCENTAGE ||
             program.discountType === 'percentage';
    }

    isAmountDiscount(program) {
      return program.typeEarn === JoyRedeemPrograms.DISCOUNT_TYPES.AMOUNT ||
             program.discountType === 'amount';
    }

    formatPercentageDiscountText(program) {
      const points = program.minSpendPoint || program.spendPoint || 100;
      const pointText = this.formatPointText(points);
      const percentage = program.earnPercentage || program.discount || 0;
      return `${percentage}% for ${points} ${pointText}`;
    }

    formatAmountDiscountText(program) {
      const points = program.minSpendPoint || program.spendPoint || 100;
      const pointText = this.formatPointText(points);
      const amount = program.earnAmount || program.discount || 0;
      return `$${amount} for ${points} ${pointText}`;
    }

    formatDefaultDynamicText(program) {
      const ratio = program.earnAmount || 1;
      const points = program.spendPoint || 1;
      const pointText = this.formatPointText(points);
      return `${points} ${pointText} for $${ratio}`;
    }

    getFixedDisplayText(program) {
      const points = program.spendPoint || program.pointCost || 0;
      const pointText = this.formatPointText(points);
      return `${points} ${pointText}`;
    }

    getProgramDisplayText(program) {
      return this.isDynamicProgram(program) ?
        this.getDynamicDisplayText(program) :
        this.getFixedDisplayText(program);
    }

    generateIconHTML(program) {
      const iconUrl = program.loyaltyPageCustomIcon;
      const fallbackEmoji = this.getFallbackEmoji(program.event);
      const hasValid = this.hasValidIcon(iconUrl);

      if (hasValid) {
        return `
          <img src="${iconUrl}" alt="${program.title}" onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
          <div style="display:none; width:100%; height:100%; background:rgba(212, 165, 116, 0.08); border-radius:inherit; align-items:center; justify-content:center; font-size:18px; color:#D4A574;">${fallbackEmoji}</div>
        `;
      }

      return `
        <div style="width:100%; height:100%; background:rgba(212, 165, 116, 0.08); border-radius:inherit; display:flex; align-items:center; justify-content:center; font-size:18px; color:#D4A574;">${fallbackEmoji}</div>
      `;
    }

    generateCardHTML(program, displayText, canRedeem) {
      const description = this.getProgramDescription(program);
      const iconHTML = this.generateIconHTML(program);
      return `
        ${this.showIcon ? `<div class="joy-redeem-icon">
          ${iconHTML}
        </div>` : ''}
        <div class="joy-redeem-content">
          <div class="joy-redeem-name">${program.title}</div>
          <div class="joy-redeem-description">${description}</div>
        </div>
        <div class="joy-redeem-action">
          <button class="joy-redeem-button" ${!canRedeem ? 'disabled' : ''}>
            ${canRedeem ? '{{ section.settings.redeem_button_text | default: "Redeem" }}' : '{{ section.settings.not_enough_points_text | default: "Not enough points" }}'}
          </button>
        </div>
      `;
    }

    addCardClickHandler(card, program, canRedeem) {
      card.addEventListener('click', (e) => {
        e.preventDefault();
        if (canRedeem) {
          this.handleRedeemClick(program);
        }
      });
    }

    createProgramCard(program) {
      const card = document.createElement('div');
      card.className = JoyRedeemPrograms.CSS_CLASSES.CARD;

      const canRedeem = this.canCustomerRedeem(program);
      if (!canRedeem) {
        card.classList.add(JoyRedeemPrograms.CSS_CLASSES.CARD_DISABLED);
      }

      this.addCardClickHandler(card, program, canRedeem);

      const displayText = this.getProgramDisplayText(program);
      card.innerHTML = this.generateCardHTML(program, displayText, canRedeem);

      return card;
    }

    handleRedeemClick(program) {
      try {
        console.log('Redeem clicked:', program);

        if (!this.isCustomerLoggedIn()) {
          this.redirectToLogin();
          return;
        }

        this.createRedeemModal(program);
      } catch (error) {
        console.error('Error handling redeem click:', error);
        this.showRedeemError(JoyRedeemPrograms.ERROR_MESSAGES.REDEEM_ERROR);
      }
    }

    isCustomerLoggedIn() {
      return Boolean(this.customerId);
    }

    redirectToLogin() {
      try {
        window.location.href = '/account/login';
      } catch (error) {
        console.error('Error redirecting to login:', error);
      }
    }

    createRedeemModal(program) {
      try {
        this.removeExistingModal();
        const modal = this.createModalElement(program);
        const modalData = this.prepareModalData(program);

        modal.innerHTML = this.generateModalHTML(program, modalData);
        document.body.appendChild(modal);

        this.setupModalInteractions(modal, program, modalData);
        this.attachModalEventListeners(modal, program);
      } catch (error) {
        console.error('Error creating redeem modal:', error);
        this.showRedeemError('Unable to open redemption modal');
      }
    }

    removeExistingModal() {
      const existingModal = document.querySelector(`.${JoyRedeemPrograms.CSS_CLASSES.MODAL}`);
      if (existingModal) {
        existingModal.remove();
      }
    }

    createModalElement(program) {
      const modal = document.createElement('div');
      modal.className = `${JoyRedeemPrograms.CSS_CLASSES.MODAL} ${JoyRedeemPrograms.CSS_CLASSES.MODAL_MEDIUM}`;
      modal.style.display = 'block';
      return modal;
    }

    prepareModalData(program) {
      const isDynamic = this.isDynamicProgram(program);
      const customerPoints = this.getCustomerPoints();
      const selectedPoints = program.minSpendPoint || program.spendPoint || 1;
      const maxPoints = isDynamic && program.hasMaxSpend ?
        Math.min(customerPoints, program.maxSpendPoint) :
        customerPoints;

      return {
        isDynamic,
        selectedPoints,
        maxPoints,
        iconUrl: program.loyaltyPageCustomIcon,
        fallbackEmoji: this.getFallbackEmoji(program.event),
        hasValidIcon: this.hasValidIcon(program.loyaltyPageCustomIcon)
      };
    }

    generateModalHTML(program, modalData) {
      const { isDynamic, selectedPoints, maxPoints, iconUrl, fallbackEmoji, hasValidIcon } = modalData;

      return `
        <div class="joy-redeem-modal-overlay">
          <div class="joy-redeem-modal-content">
            <button class="joy-redeem-modal-close">&times;</button>
            ${this.generateModalHeader(program, iconUrl, fallbackEmoji, hasValidIcon)}
            ${this.generateModalBody(program, isDynamic, selectedPoints, maxPoints)}
          </div>
        </div>
      `;
    }

    generateModalHeader(program, iconUrl, fallbackEmoji, hasValidIcon) {
      const iconHTML = this.generateModalIconHTML(iconUrl, fallbackEmoji, hasValidIcon, program.title);
      return `
        <div class="joy-redeem-modal-header">
          <div style="display: flex; align-items: flex-start; gap: 16px; text-align: left;">
            ${this.showIcon ? `<div class="joy-redeem-modal-icon" style="margin: 0; flex-shrink: 0;">
              ${iconHTML}
            </div>` : ''}
            <div style="flex: 1;">
              <h3 class="joy-redeem-modal-title" style="margin: 0 0 8px 0;">${program.title}</h3>
              <p class="joy-redeem-modal-description" style="margin: 0 0 16px 0;">${this.getProgramDescription(program)}</p>
            </div>
          </div>
        </div>
      `;
    }

    generateModalIconHTML(iconUrl, fallbackEmoji, hasValidIcon, altText) {
      if (hasValidIcon) {
        return `
          <img src="${iconUrl}" alt="${altText}" onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
          <div style="display:none; width:36px; height:36px; background:#f0f0f0; border-radius:8px; align-items:center; justify-content:center; font-size:18px; color:#888;">${fallbackEmoji}</div>
        `;
      }

      return `
        <div style="width:36px; height:36px; background:#f0f0f0; border-radius:8px; display:flex; align-items:center; justify-content:center; font-size:18px; color:#888;">${fallbackEmoji}</div>
      `;
    }

    generateModalBody(program, isDynamic, selectedPoints, maxPoints) {
      const sliderHTML = isDynamic ? this.generateSliderHTML(program, selectedPoints, maxPoints) : '';
      const summaryHTML = this.generateSummaryHTML(program, isDynamic, selectedPoints);
      const actionsHTML = this.generateActionsHTML(program, isDynamic, selectedPoints);

      return `
        <div class="joy-redeem-modal-body">
          ${sliderHTML}
          ${summaryHTML}
          ${actionsHTML}
        </div>
      `;
    }

    generateSliderHTML(program, selectedPoints, maxPoints) {
      const minPoints = program.minSpendPoint || program.spendPoint || 1;
      const pointText = this.formatPointsWithText(selectedPoints);
      const dynamicAmount = (selectedPoints * (program.earnAmount || 1) / (program.spendPoint || 1)).toFixed(2);

      return `
        <div class="joy-points-selector">
          <label class="joy-points-selector-label">{{ section.settings.slider_label_text | default: 'Select points to redeem' }}</label>
          <div class="joy-slider-container">
            <input type="range"
              class="joy-points-slider"
              id="joy-points-slider-${program.id}"
              min="${minPoints}"
              max="${maxPoints}"
              step="${program.spendPoint || 1}"
              value="${selectedPoints}">
            <div class="joy-slider-values">
              <span class="joy-slider-min">${minPoints}</span>
              <span class="joy-slider-value" id="joy-slider-value-${program.id}">${pointText}</span>
              <span class="joy-slider-max">${maxPoints}</span>
            </div>
          </div>
          <div class="joy-dynamic-value">
            {{ section.settings.slider_value_prefix | default: "You'll get:" }} <strong>$<span id="joy-dynamic-amount-${program.id}">${dynamicAmount}</span> {{ section.settings.slider_value_suffix | default: 'off' }}</strong>
          </div>
        </div>
      `;
    }

    generateSummaryHTML(program, isDynamic, selectedPoints) {
      const points = isDynamic ? selectedPoints : (program.spendPoint || program.pointCost || 0);

      return `
        <div class="joy-reward-summary">
          <div class="joy-reward-summary-title">{{ section.settings.reward_summary_title | default: 'Reward summary' }}</div>
          <div class="joy-reward-summary-content" id="joy-reward-summary-${program.id}">
            You will spend <strong>${this.formatPointsWithText(points)}</strong> to redeem this reward.
          </div>
        </div>
      `;
    }

    generateActionsHTML(program, isDynamic, selectedPoints) {
      const points = isDynamic ? selectedPoints : (program.spendPoint || program.pointCost || 0);

      return `
        <div class="joy-redeem-modal-actions">
          <button class="joy-redeem-modal-button ${JoyRedeemPrograms.CSS_CLASSES.CANCEL_BUTTON}">{{ section.settings.modal_cancel_text | default: 'Cancel' }}</button>
          <button class="joy-redeem-modal-button ${JoyRedeemPrograms.CSS_CLASSES.CONFIRM_BUTTON}" data-program-id="${program.id}" data-points="${points}">
            {{ section.settings.modal_redeem_button_text | default: 'Confirm Redeem' }}
          </button>
        </div>
      `;
    }

    setupModalInteractions(modal, program, modalData) {
      if (modalData.isDynamic) {
        this.setupSliderInteractions(program);
      }
    }

    setupSliderInteractions(program) {
      const slider = document.getElementById(`joy-points-slider-${program.id}`);
      if (!slider) return;

      slider.addEventListener('input', (e) => {
        this.handleSliderChange(e, program);
      });
    }

    handleSliderChange(event, program) {
      const points = parseInt(event.target.value);
      const pointText = this.formatPointsWithText(points);

      this.updateSliderDisplay(program.id, points, pointText);
      this.updateDynamicAmount(program, points);
      this.updateRewardSummary(program.id, pointText);
      this.updateConfirmButton(points);
    }

    updateSliderDisplay(programId, points, pointText) {
      const sliderValue = document.getElementById(`joy-slider-value-${programId}`);
      if (sliderValue) {
        sliderValue.textContent = pointText;
      }
    }

    updateDynamicAmount(program, points) {
      const dynamicAmount = document.getElementById(`joy-dynamic-amount-${program.id}`);
      if (dynamicAmount) {
        const amount = (points * (program.earnAmount || 1) / (program.spendPoint || 1)).toFixed(2);
        dynamicAmount.textContent = amount;
      }
    }

    updateRewardSummary(programId, pointText) {
      const rewardSummary = document.getElementById(`joy-reward-summary-${programId}`);
      if (rewardSummary) {
        rewardSummary.innerHTML = `You will spend <strong>${pointText}</strong> to redeem this reward.`;
      }
    }

    updateConfirmButton(points) {
      const confirmButton = document.querySelector(`.${JoyRedeemPrograms.CSS_CLASSES.CONFIRM_BUTTON}`);
      if (confirmButton) {
        confirmButton.setAttribute('data-points', points);
      }
    }

    attachModalEventListeners(modal, program) {
      modal.addEventListener('click', (e) => this.handleModalClick(e, program));
      this.attachEscapeKeyListener();
    }

    handleModalClick(event, program) {
      const { target } = event;

      if (target.classList.contains('joy-redeem-modal-overlay') ||
          target.classList.contains('joy-redeem-modal-close') ||
          target.classList.contains(JoyRedeemPrograms.CSS_CLASSES.CANCEL_BUTTON)) {
        this.closeRedeemModal();
        return;
      }

      if (target.classList.contains(JoyRedeemPrograms.CSS_CLASSES.CONFIRM_BUTTON)) {
        this.confirmRedeem(program);
      }
    }

    attachEscapeKeyListener() {
      const handleEscape = (e) => {
        if (e.key === 'Escape') {
          this.closeRedeemModal();
          document.removeEventListener('keydown', handleEscape);
        }
      };
      document.addEventListener('keydown', handleEscape);
    }

    async confirmRedeem(program) {
      const confirmButton = document.querySelector('.joy-confirm-button');
      const originalButtonText = confirmButton ? confirmButton.textContent : 'Confirm Redeem';

      // Get the points to redeem (for dynamic programs, this comes from the slider)
      const pointsToRedeem = confirmButton && confirmButton.getAttribute('data-points') ?
        parseInt(confirmButton.getAttribute('data-points')) :
        (program.spendPoint || program.pointCost || 0);

      console.log('Redeeming with points:', pointsToRedeem, 'Program:', program);

      // Disable button and show loading state with spinner
      if (confirmButton) {
        confirmButton.disabled = true;
        confirmButton.innerHTML = `
          <span style="display: inline-flex; align-items: center; gap: 8px;">
            <svg class="joy-spinner" width="16" height="16" viewBox="0 0 24 24" style="animation: joy-spin 1s linear infinite;">
              <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="3" fill="none" stroke-dasharray="31.4" stroke-dashoffset="10.5"></circle>
            </svg>
            {{ section.settings.processing_text | default: 'Processing...' }}
          </span>
        `;
      }

      try {
        // Try to redeem via Joy SDK using the correct method name
        if (window.joyInstance && typeof window.joyInstance.redeem === 'function') {
          // For dynamic programs, pass the selected points
          const result = await window.joyInstance.redeem(
            program.id,
            pointsToRedeem
          );

          console.log('Redeem result:', result);

          // Check if the result indicates an error
          // The Joy SDK returns {status: false, error: message} for errors
          if (result && result.status === false && result.error) {
            throw new Error(result.error);
          }

          // If result exists and doesn't have status:false, it's successful
          if (result) {
            // Show success state in button first
            if (confirmButton) {
              confirmButton.innerHTML = `
                <span style="display: inline-flex; align-items: center; gap: 8px;">
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M20 6L9 17l-5-5" stroke-linecap="round" stroke-linejoin="round"/>
                  </svg>
                  {{ section.settings.redeemed_text | default: 'Redeemed!' }}
                </span>
              `;
            }

            // Extract discount code from result
            const discountCode = result.data?.discount?.code || result.discount?.code || result.code;

            // Show success modal content with discount code
            this.showRedeemSuccess(program, pointsToRedeem, discountCode);

            // Refresh customer data cache
            if (this.customerId) {
              try {
                this.cachedCustomer = await window.joyInstance.customer();
              } catch (refreshError) {
                console.warn('Could not refresh customer data:', refreshError);
              }
            }

            // Reload the programs to update points (keep modal open for user to see success)
            setTimeout(() => {
              this.loadRedeemPrograms();
            }, 2500);
          } else {
            throw new Error('Redemption failed - no data returned');
          }
        } else {
          // Fallback: try generic redeem method
          throw new Error('Redeem functionality not available');
        }
      } catch (error) {
        console.error('Redeem error:', error);
        this.showRedeemError(error.message || 'An error occurred. Please try again.');

        // Re-enable button with original text
        if (confirmButton) {
          confirmButton.disabled = false;
          confirmButton.textContent = originalButtonText;
        }
      }
    }

    showRedeemSuccess(program, pointsRedeemed, discountCode) {
      const modal = document.querySelector('.joy-redeem-modal');
      const modalBody = document.querySelector('.joy-redeem-modal-body');
      if (!modalBody || !modal) return;

      const pointText = this.formatPointsWithText(pointsRedeemed || program.spendPoint || program.pointCost || 0);

      if (discountCode) {
        // Replace entire modal content to avoid duplication
        const modalContent = modal.querySelector('.joy-redeem-modal-content');
        if (modalContent) {
          modalContent.innerHTML = `
            <button class="joy-redeem-modal-close">&times;</button>
            <div class="joy-redeem-modal-header">
              <div style="display: flex; align-items: flex-start; gap: 16px; text-align: left;">
                ${this.showIcon ? `<div class="joy-redeem-modal-icon" style="margin: 0; flex-shrink: 0;">
                  ${this.generateModalIconHTML(program.loyaltyPageCustomIcon, this.getFallbackEmoji(program.event), this.hasValidIcon(program.loyaltyPageCustomIcon), program.title)}
                </div>` : ''}
                <div style="flex: 1;">
                  <h3 class="joy-redeem-modal-title" style="margin: 0 0 8px 0;">${program.title}</h3>
                  <p class="joy-redeem-modal-description" style="margin: 0 0 16px 0;">${pointText}</p>
                </div>
              </div>
            </div>
            <div class="joy-redeem-modal-body">
              <div style="text-align: center; padding: 0 0 24px 0;">
                <div style="font-size: 14px; color: #374151; margin-bottom: 20px;">
                  {{ section.settings.discount_code_instruction | default: 'Use this discount code on your next order!' }}
                </div>

                <div class="joy-reward-summary" style="margin-bottom: 24px;">
                  <div style="display: flex; align-items: center; gap: 8px; justify-content: center;">
                    <div id="discount-code-text" style="font-family: monospace; font-size: 18px; font-weight: bold; color: {{ section.settings.primary_color | default: '#D4A574' }}; letter-spacing: 1px;">
                      ${discountCode}
                    </div>
                    <button id="copy-discount-code" style="background: none; border: none; cursor: pointer; padding: 4px; color: {{ section.settings.primary_color | default: '#D4A574' }}; transition: color 0.2s ease;">
                      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <rect width="14" height="14" x="8" y="8" rx="2" ry="2"/>
                        <path d="m4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2"/>
                      </svg>
                    </button>
                  </div>
                </div>

                <div class="joy-redeem-modal-actions">
                  <button id="apply-code-button" class="joy-redeem-modal-button joy-confirm-button" style="width: 100%;">
                    {{ section.settings.apply_code_text | default: 'Apply code' }}
                  </button>
                </div>
              </div>
            </div>
          `;
        }

        // Add copy and apply functionality
        this.setupDiscountCodeCopy(discountCode);
        this.setupApplyCodeButton(discountCode);

        // Re-attach modal event listeners since we replaced the content
        this.reattachModalEventListeners(modal, program);
      } else {
        // Show generic success message if no discount code
        modalBody.innerHTML = `
          <div style="text-align: center; padding: 20px;">
            <div style="width: 80px; height: 80px; background: {{ section.settings.primary_color | default: '#D4A574' }}; border-radius: 50%; margin: 0 auto 20px; display: flex; align-items: center; justify-content: center; font-size: 40px; color: white;">
              ✓
            </div>
            <h3 style="margin: 0 0 12px 0; color: #2c2c2c;">{{ section.settings.success_title | default: 'Success!' }}</h3>
            <p style="margin: 0 0 20px 0; color: #666;">
              You have successfully redeemed "<strong>${program.title}</strong>" for <strong>${pointText}</strong>!
            </p>
            <div style="background: {{ section.settings.primary_color | default: '#D4A574' | color_modify: 'alpha', 0.1 }}; padding: 12px; border-radius: 6px; font-size: 13px; color: {{ section.settings.primary_color | default: '#D4A574' | color_darken: 30 }};">
              {{ section.settings.success_note | default: 'Your reward will be processed and sent to you shortly.' }}
            </div>
          </div>
        `;
      }
    }

    setupDiscountCodeCopy(discountCode) {
      const copyButton = document.getElementById('copy-discount-code');
      if (!copyButton) return;

      copyButton.addEventListener('click', async () => {
        try {
          if (navigator.clipboard) {
            await navigator.clipboard.writeText(discountCode);
          } else {
            // Fallback for older browsers
            const textArea = document.createElement('textarea');
            textArea.value = discountCode;
            document.body.appendChild(textArea);
            textArea.select();
            document.execCommand('copy');
            document.body.removeChild(textArea);
          }

          // Show visual feedback
          copyButton.style.color = '#10b981';
          setTimeout(() => {
            copyButton.style.color = '#6B7280';
          }, 1000);
        } catch (error) {
          console.error('Failed to copy discount code:', error);
        }
      });
    }

    setupApplyCodeButton(discountCode) {
      const applyButton = document.getElementById('apply-code-button');
      if (!applyButton) return;

      applyButton.addEventListener('click', async () => {
        try {
          // Apply the discount code using Joy SDK or redirect to cart
          if (window.joyInstance && typeof window.joyInstance.applyDiscount === 'function') {
            await window.joyInstance.applyDiscount(discountCode);
          } else {
            // Fallback: redirect to cart with discount code
            const cartUrl = '/cart';
            const discountUrl = `/discount/${discountCode}`;
            window.location.href = discountUrl + '?redirect=' + encodeURIComponent(cartUrl);
          }
        } catch (error) {
          console.error('Failed to apply discount code:', error);
          // Still redirect as fallback
          const cartUrl = '/cart';
          const discountUrl = `/discount/${discountCode}`;
          window.location.href = discountUrl + '?redirect=' + encodeURIComponent(cartUrl);
        }
      });
    }

    reattachModalEventListeners(modal, program) {
      // Re-attach close functionality
      const closeBtn = modal.querySelector('.joy-redeem-modal-close');
      if (closeBtn) {
        closeBtn.addEventListener('click', () => this.closeRedeemModal());
      }

      // Re-attach overlay click to close
      modal.addEventListener('click', (e) => {
        if (e.target.classList.contains('joy-redeem-modal-overlay')) {
          this.closeRedeemModal();
        }
      });
    }

    showRedeemError(message) {
      const modalBody = document.querySelector('.joy-redeem-modal-body');
      if (modalBody) {
        const errorDiv = modalBody.querySelector('.joy-redeem-error') || document.createElement('div');
        errorDiv.className = 'joy-redeem-error';
        errorDiv.innerHTML = `
          <div style="background: #fee; border: 1px solid #fcc; border-radius: 6px; padding: 12px; margin: 16px 0; color: #c33;">
            <strong>Error:</strong> ${message}
          </div>
        `;

        if (!modalBody.querySelector('.joy-redeem-error')) {
          modalBody.insertBefore(errorDiv, modalBody.querySelector('.joy-redeem-modal-actions'));
        }

        // Remove error after 5 seconds
        setTimeout(() => errorDiv.remove(), 5000);
      }
    }

    closeRedeemModal() {
      const modal = document.querySelector('.joy-redeem-modal');
      if (modal) {
        modal.style.animation = 'joy-modal-fade-out 0.3s ease forwards';
        setTimeout(() => {
          modal.remove();
          // Clean up any event listeners
          document.removeEventListener('keydown', this.handleEscape);
        }, 300);
      }
    }

    getCustomerPoints() {
      try {
        // First try cached customer data
        const cachedPoints = this.getCachedCustomerPoints();
        if (cachedPoints !== null) return cachedPoints;

        // Try Joy SDK global data
        const globalPoints = this.getGlobalJoyPoints();
        if (globalPoints !== null) return globalPoints;

        // Fallback to Joy instance customer data
        const instancePoints = this.getInstanceCustomerPoints();
        if (instancePoints !== null) return instancePoints;

        return 0;
      } catch (error) {
        console.error('Error getting customer points:', error);
        return 0;
      }
    }

    getCachedCustomerPoints() {
      try {
        if (this.cachedCustomer && this.cachedCustomer.point) {
          return parseInt(this.cachedCustomer.point) || 0;
        }
        return null;
      } catch (error) {
        console.error('Error accessing cached customer points:', error);
        return null;
      }
    }

    getGlobalJoyPoints() {
      try {
        if (window.AVADA_JOY?.points) {
          return parseInt(window.AVADA_JOY.points) || 0;
        }
        return null;
      } catch (error) {
        console.error('Error accessing global Joy points:', error);
        return null;
      }
    }

    getInstanceCustomerPoints() {
      try {
        if (window.joyInstance && window.joyInstance.customer && window.joyInstance.customer.point) {
          return parseInt(window.joyInstance.customer.point) || 0;
        }
        return null;
      } catch (error) {
        console.error('Error accessing Joy instance customer points:', error);
        return null;
      }
    }

    getProgramDescription(program) {
      if (program.description) {
        return program.description;
      }

      const isDynamic = this.isDynamicProgram(program);

      if (isDynamic) {
        return this.getDynamicProgramDescription(program);
      }

      if (program.spendPoint || program.pointCost) {
        const points = program.spendPoint || program.pointCost;
        return `Spend ${this.formatPointsWithText(points)} to redeem this reward`;
      }

      return `Redeem this reward with your ${this.getPointTerminology().plural}`;
    }

    getDynamicProgramDescription(program) {
      if (this.isPercentageDiscount(program)) {
        const percentage = program.earnPercentage || program.discount || 0;
        return `Get ${percentage}% off your purchase`;
      }

      if (this.isAmountDiscount(program)) {
        const amount = program.earnAmount || program.discount || 0;
        return `Get $${amount} off your purchase`;
      }

      // Default for points-for-dollars programs
      const ratio = program.earnAmount || 1;
      const points = program.spendPoint || 1;
      return `Exchange ${this.formatPointsWithText(points)} for $${ratio} discount`;
    }

    getFallbackEmoji(event) {
      const emojiMap = {
        'discount': '💰',
        'free_shipping': '🚚',
        'gift_card': '🎁',
        'product_discount': '🏷️',
        'custom_reward': '⭐'
      };
      return emojiMap[event] || '🎁';
    }

    showNoDataMessage(message) {
      this.innerHTML = `
        <div class="joy-error-state">
          <h3>No programs available</h3>
          <p>${message}</p>
        </div>
      `;
    }
  });
}
</script>

{% schema %}
{
  "name": "Joy: Custom Way to Redeem",
  "settings": [
    {
      "type": "header",
      "content": "Content"
    },
    {
      "type": "checkbox",
      "id": "show_header",
      "label": "Show Header",
      "default": true
    },
    {
      "type": "text",
      "id": "title",
      "label": "Title",
      "default": "Ways to redeem"
    },
    {
      "type": "text",
      "id": "subtitle",
      "label": "Subtitle"
    },
    {
      "type": "select",
      "id": "header_alignment",
      "label": "Header Alignment",
      "options": [
        {"value": "left", "label": "Left"},
        {"value": "center", "label": "Center"},
        {"value": "right", "label": "Right"}
      ],
      "default": "center"
    },
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "range",
      "id": "max_width",
      "min": 600,
      "max": 1600,
      "step": 100,
      "unit": "px",
      "label": "Maximum Width",
      "default": 1200
    },
    {
      "type": "range",
      "id": "section_padding",
      "min": 20,
      "max": 100,
      "step": 10,
      "unit": "px",
      "label": "Section Padding",
      "default": 60
    },
    {
      "type": "range",
      "id": "card_gap",
      "min": 8,
      "max": 48,
      "step": 4,
      "unit": "px",
      "label": "Card Gap",
      "default": 24
    },
    {
      "type": "header",
      "content": "Typography"
    },
    {
      "type": "range",
      "id": "title_size",
      "min": 20,
      "max": 48,
      "step": 2,
      "unit": "px",
      "label": "Title Size",
      "default": 32
    },
    {
      "type": "range",
      "id": "program_name_size",
      "min": 14,
      "max": 22,
      "step": 1,
      "unit": "px",
      "label": "Program Name Size",
      "default": 18
    },
    {
      "type": "range",
      "id": "program_description_size",
      "min": 12,
      "max": 16,
      "step": 1,
      "unit": "px",
      "label": "Program Description Size",
      "default": 13
    },
    {
      "type": "range",
      "id": "points_size",
      "min": 14,
      "max": 24,
      "step": 1,
      "unit": "px",
      "label": "Points Text Size",
      "default": 18
    },
    {
      "type": "header",
      "content": "Card Styling"
    },
    {
      "type": "color",
      "id": "card_background",
      "label": "Card Background",
      "default": "transparent"
    },
    {
      "type": "color",
      "id": "card_border_color",
      "label": "Card Border Color",
      "default": "#E5E7EB"
    },
    {
      "type": "color",
      "id": "card_hover_border_color",
      "label": "Card Hover Border Color",
      "default": "#6B7280"
    },
    {
      "type": "color",
      "id": "card_hover_background",
      "label": "Card Hover Background",
      "default": "#FFFFFF"
    },
    {
      "type": "range",
      "id": "card_border_width",
      "min": 0,
      "max": 4,
      "step": 1,
      "unit": "px",
      "label": "Card Border Width",
      "default": 1
    },
    {
      "type": "range",
      "id": "card_border_radius",
      "min": 0,
      "max": 24,
      "step": 2,
      "unit": "px",
      "label": "Card Border Radius",
      "default": 12
    },
    {
      "type": "range",
      "id": "card_padding",
      "min": 16,
      "max": 36,
      "step": 4,
      "unit": "px",
      "label": "Card Padding",
      "default": 32
    },
    {
      "type": "range",
      "id": "card_padding_mobile",
      "min": 12,
      "max": 24,
      "step": 2,
      "unit": "px",
      "label": "Card Padding Mobile",
      "default": 16
    },
    {
      "type": "range",
      "id": "card_gap_internal",
      "min": 8,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Card Internal Gap",
      "default": 16
    },
    {
      "type": "range",
      "id": "card_gap_mobile",
      "min": 8,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Card Internal Gap Mobile",
      "default": 12
    },
    {
      "type": "header",
      "content": "Icon Styling"
    },
    {
      "type": "checkbox",
      "id": "show_icon",
      "label": "Show Icon",
      "default": true,
      "info": "Display icons in the redeem cards"
    },
    {
      "type": "range",
      "id": "icon_size",
      "min": 48,
      "max": 96,
      "step": 8,
      "unit": "px",
      "label": "Icon Container Size",
      "default": 56
    },
    {
      "type": "range",
      "id": "icon_image_size",
      "min": 24,
      "max": 64,
      "step": 4,
      "unit": "px",
      "label": "Icon Image Size",
      "default": 32
    },
    {
      "type": "color",
      "id": "icon_background",
      "label": "Icon Background",
      "default": "#F3F4F6"
    },
    {
      "type": "range",
      "id": "icon_border_radius",
      "min": 0,
      "max": 32,
      "step": 2,
      "unit": "px",
      "label": "Icon Border Radius",
      "default": 12
    },
    {
      "type": "header",
      "content": "Button Styling"
    },
    {
      "type": "range",
      "id": "button_text_size",
      "min": 12,
      "max": 18,
      "step": 1,
      "unit": "px",
      "label": "Button Text Size",
      "default": 14
    },
    {
      "type": "range",
      "id": "button_border_radius",
      "min": 0,
      "max": 16,
      "step": 2,
      "unit": "px",
      "label": "Button Border Radius",
      "default": 6
    },
    {
      "type": "color",
      "id": "button_color",
      "label": "Button Text Color",
      "default": "#FFFFFF"
    },
    {
      "type": "header",
      "content": "Colors"
    },
    {
      "type": "color",
      "id": "primary_color",
      "label": "Primary Color",
      "default": "#6B7280"
    },
    {
      "type": "color",
      "id": "primary_color_hover",
      "label": "Primary Color Hover",
      "default": "#4B5563"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Section Background",
      "default": "#FFFFFF"
    },
    {
      "type": "color",
      "id": "title_color",
      "label": "Title Color",
      "default": "#1A1A1A"
    },
    {
      "type": "color",
      "id": "subtitle_color",
      "label": "Subtitle Color",
      "default": "#6B7280"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Card Title Color",
      "default": "#111827"
    },
    {
      "type": "color",
      "id": "description_color",
      "label": "Card Description Color",
      "default": "#6B7280"
    },
    {
      "type": "header",
      "content": "Text Settings"
    },
    {
      "type": "text",
      "id": "redeem_button_text",
      "label": "Redeem Button Text",
      "default": "Redeem",
      "info": "Text shown on the redeem button"
    },
    {
      "type": "text",
      "id": "not_enough_points_text",
      "label": "Not Enough Points Text",
      "default": "Not enough points",
      "info": "Text shown when user doesn't have enough points"
    },
    {
      "type": "text",
      "id": "modal_redeem_button_text",
      "label": "Modal Redeem Button Text",
      "default": "Redeem",
      "info": "Text shown on the confirm button in modal"
    },
    {
      "type": "text",
      "id": "modal_cancel_text",
      "label": "Modal Cancel Button Text",
      "default": "Cancel",
      "info": "Text shown on the cancel button"
    },
    {
      "type": "text",
      "id": "processing_text",
      "label": "Processing Text",
      "default": "Processing...",
      "info": "Text shown while processing redemption"
    },
    {
      "type": "text",
      "id": "redeemed_text",
      "label": "Redeemed Success Text",
      "default": "Redeemed!",
      "info": "Text shown when redemption is successful"
    },
    {
      "type": "text",
      "id": "reward_summary_title",
      "label": "Reward Summary Title",
      "default": "Reward summary",
      "info": "Title for the reward summary section"
    },
    {
      "type": "text",
      "id": "reward_summary_text",
      "label": "Reward Summary Text",
      "default": "You will spend {points} points to redeem this reward.",
      "info": "Text for reward summary. Use {points} as placeholder"
    },
    {
      "type": "text",
      "id": "success_title",
      "label": "Success Modal Title",
      "default": "Success!",
      "info": "Title shown in success modal"
    },
    {
      "type": "text",
      "id": "success_message",
      "label": "Success Message",
      "default": "You have successfully redeemed \"{title}\" for {points} points!",
      "info": "Success message. Use {title} for program name, {points} for points"
    },
    {
      "type": "text",
      "id": "success_note",
      "label": "Success Note",
      "default": "Your reward will be processed and sent to you shortly.",
      "info": "Additional note shown in success modal"
    },
    {
      "type": "text",
      "id": "points_text",
      "label": "Points Text Format",
      "default": "{points} points",
      "info": "Format for displaying points. Use {points} as placeholder"
    },
    {
      "type": "text",
      "id": "slider_label_text",
      "label": "Slider Label Text",
      "default": "Select points to redeem",
      "info": "Label shown above the points slider for dynamic programs"
    },
    {
      "type": "text",
      "id": "slider_value_prefix",
      "label": "Slider Value Text",
      "default": "You'll get:",
      "info": "Text shown before the calculated discount value"
    },
    {
      "type": "text",
      "id": "slider_value_suffix",
      "label": "Slider Value Suffix",
      "default": "off",
      "info": "Text shown after the discount amount (e.g., '$5 off')"
    },
    {
      "type": "header",
      "content": "Discount Code Settings"
    },
    {
      "type": "text",
      "id": "discount_code_instruction",
      "label": "Discount Code Instruction",
      "default": "Use this discount code on your next order!",
      "info": "Instruction text shown above the discount code"
    },
    {
      "type": "text",
      "id": "copy_button_text",
      "label": "Copy Button Text",
      "default": "Copy",
      "info": "Text shown on the copy button"
    },
    {
      "type": "text",
      "id": "copied_text",
      "label": "Copied Success Text",
      "default": "Copied!",
      "info": "Text shown when code is successfully copied"
    },
    {
      "type": "text",
      "id": "apply_code_text",
      "label": "Apply Code Button Text",
      "default": "Apply code",
      "info": "Text shown on the apply code button"
    }
  ],
  "presets": [
    {
      "name": "Joy: Custom Way To Redeem"
    }
  ]
}
{% endschema %}
